service: frontend

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: ${opt:stage, self:custom.defaultStage}
  # The following line is for testing local deploys
  # profile: ${self:custom.profiles.${self:provider.stage}, 'default'}
  endpointType: REGIONAL
  deploymentBucket:
      name: "pinster-serverless-deploy-${self:custom.profiles.${self:provider.stage}}"

custom:
  defaultStage: dev
  profiles:
    dev: dev
    prod: prod
  customDomain:
    domainName: "app-${self:provider.stage}.pinster.io"
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: "image-service-dev.pinster.io"
    createRoute53Record: true
  reactBucket: ${self:custom.customDomain.domainName}

resources:
  Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.reactBucket}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Retain
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: 
            - Fn::Join: [':', ['arn:aws:s3', Ref: 'WebsiteBucket', '/*']]
  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
        - DomainName: Fn::Select: [2, Fn::Split: ["/", Fn::GetAtt: WebsiteBucket.WebsiteURL]]
          Id: S3Origin
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
        - ${self:custom.reactBucket}
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:582149114309:certificate/4527b2fc-14a6-417c-a35c-82f5426e516a
          SslSupportMethod: sni-only
  WebsiteDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: pinster.io.
      RecordSets:
      - Name: ${self:custom.reactBucket}
        Type: A
        AliasTarget:
          HostedZoneId: Z2XVRILSTTAGW1
          DNSName: Fn::GetAtt: [WebsiteCloudfront, DomainName]
    # ReactS3Bucket:
    #   Type: 'AWS::S3::Bucket'
    #   Properties:
    #     BucketName: ${self:custom.reactBucket}
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedHeaders: ['*']
    #           AllowedMethods: [GET, PUT, POST, HEAD]
    #           AllowedOrigins: ['*']
    #           MaxAge: '3600'
    #     WebsiteConfiguration:
    #       IndexDocument: index.html
    #       ErrorDocument: index.html
    #       RoutingRules:
    #       - RedirectRule:
    #           HostName: ${self:custom.reactBucket}
    #           HttpRedirectCode: 307
    #           Protocol: https
    #         RoutingRuleCondition:
    #           HttpErrorCodeReturnedEquals: 404
    # S3BucketPermissions:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: ${self:custom.reactBucket}
    #     PolicyDocument:
    #       Statement:
    #         - Principal: "*"
    #           Action:
    #             - s3:GetObject
    #           Effect: Allow
    #           Sid: "AddPerm"
    #           Resource: arn:aws:s3:::${self:custom.reactBucket}/*
    # DNS:
    #   Type: AWS::Route53::HostedZone
    #   Properties:
    #     HostedZoneConfig:
    #       Comment: Hosted zone for ${self:custom.reactBucket}
    #     Name: ${self:custom.reactBucket}

# plugins:
#   - serverless-domain-manager
